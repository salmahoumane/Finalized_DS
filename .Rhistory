axis.text.x = element_text(size = 12), # Adjust x-axis text size
axis.text.y = element_text(size = 12, face = "bold"), # Make y-axis labels bold
plot.title = element_text(face = "bold", size = 16, hjust = 0.5), # Style and center the title
legend.position = "none"  # Remove the legend
)
# Confusion matrix to evaluate performance
confusionMatrix(predictions, testData$health_decline_2yrs, positive = "Yes")
# Fit the final model 'rf_model'
rf_final <- ranger(
formula    = class_tree_formula,
data       = trainData,
num.trees  = 100, #as previously found
probability = TRUE, # Set probability as true
importance = "impurity", # Define the importance measure!
mtry       = 2.55,
seed       = 123
)
# Get feature importance
v1 <- vip(rf_final) # Calculate and plot the variable importance
v1$data # Print the variable importance values
# Plot of feature importance
v1_table <- v1$data
# Clean and rename variables
v1_table <- v1_table %>%
filter(Variable != "(Intercept)") %>%  # Remove the intercept
mutate(
Variable = case_when(  # Rename variables for cleaner labels
Variable == "health" ~ "Health",
Variable == "health_lag1" ~ "Health of previous year",
Variable == "health_satisfaction" ~ "Health Satisfaction",
Variable == "life_satisfaction" ~ "Life Satisfaction",
Variable == "educ" ~ "Education",
Variable == "male" ~ "Gender (Male)",
Variable == "worr_job_dummy" ~ "Job Worries",
Variable == "tenure" ~ "Tenure",
Variable == "work_time_weekly" ~ "Weekly Work Hours",
Variable == "work_time_weekly_lag1" ~ "Weekly Work Hours of previous year",
Variable == "net_income" ~ "Net Income",
Variable == "net_income_lag1" ~ "Net Income of previous year",
Variable == "total_years_unemployment" ~ "Total Years Unemployed",
Variable == "worr_financial_dummy" ~ "Financial Worries",
Variable == "smoking_dummy" ~ "Smoking",
Variable == "worr_health_dummy" ~ "Health Worries",
Variable == "BMI" ~ "BMI",
Variable == "age" ~ "Age",
TRUE ~ Variable  # Keep any variable not explicitly renamed
)
)
# Create the bar plot
ggplot(v1_table, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", position = "dodge", fill = "#4BADA9", color = "black") +
coord_flip() +  # Flip coordinates for better readability
labs(
title = "Variable Importance from Random Forest",
x = "",
y = "Importance"
) +
theme_minimal(base_size = 14) +
theme(
panel.grid = element_blank(), # Remove background grid
axis.text.x = element_text(size = 12), # Adjust x-axis text size
axis.text.y = element_text(size = 12, face = "bold"), # Make y-axis labels bold
plot.title = element_text(face = "bold", size = 16, hjust = 0.5), # Style and center the title
legend.position = "none"  # Remove the legend
)
# Confusion matrix to evaluate performance
confusionMatrix(predictions, testData$health_decline_2yrs, positive = "Yes")
# Fit the final model 'rf_model'
rf_final <- ranger(
formula    = class_tree_formula,
data       = trainData,
num.trees  = 100, #as previously found
probability = TRUE, # Set probability as true
importance = "impurity", # Define the importance measure!
mtry       = 2.55,
seed       = 123
)
# Get feature importance
v1 <- vip(rf_final) # Calculate and plot the variable importance
v1$data # Print the variable importance values
# Plot of feature importance
v1_table <- v1$data
# Clean and rename variables
v1_table <- v1_table %>%
filter(Variable != "(Intercept)") %>%  # Remove the intercept
mutate(
Variable = case_when(  # Rename variables for cleaner labels
Variable == "health" ~ "Health",
Variable == "health_lag1" ~ "Health of previous year",
Variable == "health_satisfaction" ~ "Health Satisfaction",
Variable == "life_satisfaction" ~ "Life Satisfaction",
Variable == "educ" ~ "Education",
Variable == "male" ~ "Gender (Male)",
Variable == "worr_job_dummy" ~ "Job Worries",
Variable == "tenure" ~ "Tenure",
Variable == "tenure_lag1" ~ "Tenure of previous year",
Variable == "work_time_weekly" ~ "Weekly Work Hours",
Variable == "work_time_weekly_lag1" ~ "Weekly Work Hours of previous year",
Variable == "net_income" ~ "Net Income",
Variable == "net_income_lag1" ~ "Net Income of previous year",
Variable == "total_years_unemployment" ~ "Total Years Unemployed",
Variable == "worr_financial_dummy" ~ "Financial Worries",
Variable == "smoking_dummy" ~ "Smoking",
Variable == "worr_health_dummy" ~ "Health Worries",
Variable == "BMI" ~ "BMI",
Variable == "age" ~ "Age",
TRUE ~ Variable  # Keep any variable not explicitly renamed
)
)
# Create the bar plot
ggplot(v1_table, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", position = "dodge", fill = "#4BADA9", color = "black") +
coord_flip() +  # Flip coordinates for better readability
labs(
title = "Variable Importance from Random Forest",
x = "",
y = "Importance"
) +
theme_minimal(base_size = 14) +
theme(
panel.grid = element_blank(), # Remove background grid
axis.text.x = element_text(size = 12), # Adjust x-axis text size
axis.text.y = element_text(size = 12, face = "bold"), # Make y-axis labels bold
plot.title = element_text(face = "bold", size = 16, hjust = 0.5), # Style and center the title
legend.position = "none"  # Remove the legend
)
# Calculate the Partial Dependence for age
pdp_healthdecline <- partial(
object = rf_final,
pred.var = "age",
train = trainData,
prob = TRUE
)
# Plot the PDP for age
pdp_plot_healthdecline <- autoplot(pdp_healthdecline) +
ggtitle("Partial Dependence of the Health Decline on Age") +
ylab("Probability of health declining in 2 years")+
xlab("Age")+
theme_minimal()
# Show the plot
pdp_plot_healthdecline
# Calculate the Partial Dependence for net_income
pdp_netincome <- partial(
object = rf_final,
pred.var = "net_income",
train = trainData,
prob = TRUE  # Since we're predicting probabilities
)
# Calculate the Partial Dependence for health_lag1
pdp_health_lag1 <- partial(
object = rf_final,
pred.var = "health_lag1",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for male
pdp_male <- partial(
object = rf_final,
pred.var = "male",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for bmi
pdp_bmi <- partial(
object = rf_final,
pred.var = "bmi",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for health_lag1
pdp_health_lag1 <- partial(
object = rf_final,
pred.var = "health_lag1",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for male
pdp_male <- partial(
object = rf_final,
pred.var = "male",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for bmi
pdp_bmi <- partial(
object = rf_final,
pred.var = "BMI",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for tenure
pdp_tenure <- partial(
object = rf_final,
pred.var = "tenure",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for health_lag1
pdp_health_lag1 <- partial(
object = rf_final,
pred.var = "health_lag1",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for male
pdp_male <- partial(
object = rf_final,
pred.var = "male",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for bmi
pdp_bmi <- partial(
object = rf_final,
pred.var = "BMI",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for tenure
pdp_tenure <- partial(
object = rf_final,
pred.var = "tenure_lag1",
train = trainData,
prob = TRUE
)
colnames(trainData)
colnames(trainData)
summary(trainData$tenure_lag1)
colnames(trainData)
summary(trainData$tenure_lag1)
sum(is.na(trainData$tenure_lag1))
pdp_tenure <- partial(
object = rf_final,
pred.var = "tenure_lag1",
train = trainData,
prob = TRUE  # Predict probabilities
)
sapply(trainData, class)
pdp_tenure <- partial(
object = rf_final,
pred.var = "tenure_lag1",
train = trainData,
prob = TRUE  # Predict probabilities
)
trainData$tenure_lag1 <- as.numeric(trainData$tenure_lag1)
pdp_tenure <- partial(
object = rf_final,
pred.var = "tenure_lag1",
train = trainData,
prob = TRUE  # Predict probabilities
)
# Visualize the Partial Dependence Plot
plotPartial(pdp_tenure) +
ggtitle("Partial Dependence of Health Decline on Tenure (Lag 1)") +
xlab("Tenure (Lag 1)") +
ylab("Partial Dependence")
sapply(trainData, class)
# Calculate the Partial Dependence for health_lag1
pdp_health_lag1 <- partial(
object = rf_final,
pred.var = "health_lag1",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for male
pdp_male <- partial(
object = rf_final,
pred.var = "male",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for bmi
pdp_bmi <- partial(
object = rf_final,
pred.var = "BMI",
train = trainData,
prob = TRUE
)
#Transform tenure_lag1 into numeric
trainData$tenure_lag1 <- as.numeric(trainData$tenure_lag1)
# Calculate the Partial Dependence for tenure
pdp_tenure <- partial(
object = rf_final,
pred.var = "tenure_lag1",
train = trainData,
prob = TRUE
)
#Transform life_satisfaction into numeric
trainData$life_satisfaction <- as.numeric(trainData$life_satisfaction)
# Calculate the Partial Dependence for Life Satisfaction
pdp_life <- partial(
object = rf_final,
pred.var = "life_satisfaction",
train = trainData,
prob = TRUE
)
# Plot the PDP for health_lag1
p1 <- autoplot(pdp_health_lag1) +
ylab("Probability of declining health in 2 years")+
xlab("Health in previous year")+
theme_minimal()
# Plot the PDP for male
p2 <- autoplot(pdp_male) +
ylab("Probability of declining health in 2 years")+
xlab("Male")+
theme_minimal()
# Plot the PDP for bmi
p3 <- autoplot(pdp_bmi) +
ylab("Probability of declining health in 2 years")+
xlab("BMI")+
theme_minimal()
# Plot the PDP for tenure
p4 <- autoplot(pdp_tenure) +
ylab("Probability of declining health in 2 years")+
xlab("Tenure of previous year")+
theme_minimal()
# Plot the PDP for life_satisfaction
p5 <- autoplot(pdp_life) +
ylab("Probability of declining health in 2 years")+
xlab("Life Satisfaction")+
theme_minimal()
# Combine the plots
(p1 | p2 ) /
(p3 | p4 ) /
( p5)
# Plot the PDP for health_lag1
p1 <- autoplot(pdp_health_lag1) +
ylab("Health Decline Prob")+
xlab("Health in previous year")+
theme_minimal()
# Plot the PDP for male
p2 <- autoplot(pdp_male) +
ylab("Health Decline Prob")+
xlab("Male")+
theme_minimal()
# Plot the PDP for bmi
p3 <- autoplot(pdp_bmi) +
ylab("Health Decline Prob")+
xlab("BMI")+
theme_minimal()
# Plot the PDP for tenure
p4 <- autoplot(pdp_tenure) +
ylab("Health Decline Prob")+
xlab("Tenure of previous year")+
theme_minimal()
# Plot the PDP for life_satisfaction
p5 <- autoplot(pdp_life) +
ylab("Health Decline Prob")+
xlab("Life Satisfaction")+
theme_minimal()
# Combine the plots
(p1 | p2 ) /
(p3 | p4 ) /
( p5)
```
# Confusion matrix to evaluate performance
confusionMatrix(predictions, testData$health_decline_2yrs, positive = "Yes")
# Fit the final model 'rf_model'
rf_final <- ranger(
formula    = class_tree_formula,
data       = trainData,
num.trees  = 100,           # Number of trees
probability = TRUE,         # Predict probabilities
importance = "impurity",    # Variable importance measure
mtry       = 3.15,          # Number of variables randomly sampled at each split
min.node.size = 10,         # Minimum node size
seed       = 123            # For reproducibility
)
# Get feature importance
v1 <- vip(rf_final) # Calculate and plot the variable importance
v1$data # Print the variable importance values
# Plot of feature importance
v1_table <- v1$data
# Clean and rename variables
v1_table <- v1_table %>%
filter(Variable != "(Intercept)") %>%  # Remove the intercept
mutate(
Variable = case_when(  # Rename variables for cleaner labels
Variable == "health" ~ "Health",
Variable == "health_lag1" ~ "Health of previous year",
Variable == "health_satisfaction" ~ "Health Satisfaction",
Variable == "life_satisfaction" ~ "Life Satisfaction",
Variable == "educ" ~ "Education",
Variable == "male" ~ "Gender (Male)",
Variable == "worr_job_dummy" ~ "Job Worries",
Variable == "tenure" ~ "Tenure",
Variable == "tenure_lag1" ~ "Tenure of previous year",
Variable == "work_time_weekly" ~ "Weekly Work Hours",
Variable == "work_time_weekly_lag1" ~ "Weekly Work Hours of previous year",
Variable == "net_income" ~ "Net Income",
Variable == "net_income_lag1" ~ "Net Income of previous year",
Variable == "total_years_unemployment" ~ "Total Years Unemployed",
Variable == "worr_financial_dummy" ~ "Financial Worries",
Variable == "smoking_dummy" ~ "Smoking",
Variable == "worr_health_dummy" ~ "Health Worries",
Variable == "BMI" ~ "BMI",
Variable == "age" ~ "Age",
TRUE ~ Variable  # Keep any variable not explicitly renamed
)
)
# Create the bar plot
ggplot(v1_table, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", position = "dodge", fill = "#4BADA9", color = "black") +
coord_flip() +  # Flip coordinates for better readability
labs(
title = "Variable Importance from Random Forest",
x = "",
y = "Importance"
) +
theme_minimal(base_size = 14) +
theme(
panel.grid = element_blank(), # Remove background grid
axis.text.x = element_text(size = 12), # Adjust x-axis text size
axis.text.y = element_text(size = 12, face = "bold"), # Make y-axis labels bold
plot.title = element_text(face = "bold", size = 16, hjust = 0.5), # Style and center the title
legend.position = "none"  # Remove the legend
)
# Calculate the Partial Dependence for age
pdp_healthdecline <- partial(
object = rf_final,
pred.var = "age",
train = trainData,
prob = TRUE
)
# Plot the PDP for age
pdp_plot_healthdecline <- autoplot(pdp_healthdecline) +
ggtitle("Partial Dependence of the Health Decline on Age") +
ylab("Probability of health declining in 2 years")+
xlab("Age")+
theme_minimal()
# Show the plot
pdp_plot_healthdecline
# Calculate the Partial Dependence for health_lag1
pdp_health_lag1 <- partial(
object = rf_final,
pred.var = "health_lag1",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for male
pdp_male <- partial(
object = rf_final,
pred.var = "male",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for bmi
pdp_bmi <- partial(
object = rf_final,
pred.var = "BMI",
train = trainData,
prob = TRUE
)
#Transform tenure_lag1 into numeric
trainData$tenure_lag1 <- as.numeric(trainData$tenure_lag1)
# Calculate the Partial Dependence for tenure
pdp_tenure <- partial(
object = rf_final,
pred.var = "tenure_lag1",
train = trainData,
prob = TRUE
)
#Transform life_satisfaction into numeric
trainData$life_satisfaction <- as.numeric(trainData$life_satisfaction)
# Calculate the Partial Dependence for Life Satisfaction
pdp_life <- partial(
object = rf_final,
pred.var = "life_satisfaction",
train = trainData,
prob = TRUE
)
# Calculate the Partial Dependence for age
pdp_age <- partial(
object = rf_final,
pred.var = "age",
train = trainData,
prob = TRUE
)
# Plot the PDP for health_lag1
p1 <- autoplot(pdp_health_lag1) +
ylab("Health Decline Prob")+
xlab("Health in previous year")+
theme_minimal()
# Plot the PDP for male
p2 <- autoplot(pdp_male) +
ylab("Health Decline Prob")+
xlab("Male")+
theme_minimal()
# Plot the PDP for bmi
p3 <- autoplot(pdp_bmi) +
ylab("Health Decline Prob")+
xlab("BMI")+
theme_minimal()
# Plot the PDP for tenure
p4 <- autoplot(pdp_tenure) +
ylab("Health Decline Prob")+
xlab("Tenure of previous year")+
theme_minimal()
# Plot the PDP for life_satisfaction
p5 <- autoplot(pdp_life) +
ylab("Health Decline Prob")+
xlab("Life Satisfaction")+
theme_minimal()
# Plot the PDP for age
p6 <- autoplot(pdp_age) +
ylab("Health Decline Prob")+
xlab("Age")+
theme_minimal()
# Combine the plots
(p1 | p2 ) /
(p3 | p4 ) /
(p5 | p6 )
